import { useState } from 'react';
import './App.css';
import bgimage from '../public/board.jpg';
import { v4 as uuidv4 } from 'uuid';

function App() {
  //falseが先手でtrueが後手
  const id = uuidv4();
  const [turn, setTurn] = useState<boolean>(false);
  //6かけ6の盤面をとりあえず作る。
  //0は何もない、1は設置完了,2は白、3は黒
  const [color, setColor] = useState<string>('');
  const [board, setBoard] = useState<string[][]>([
    ['0', '0', '0', '0', '0', '0', '0', '0'],
    ['0', '0', '0', '0', '0', '0', '0', '0'],
    ['0', '0', '0', '0', '1', '0', '0', '0'],
    ['0', '0', '0', '2', '3', '1', '0', '0'],
    ['0', '0', '1', '3', '2', '0', '0', '0'],
    ['0', '0', '0', '1', '0', '0', '0', '0'],
    ['0', '0', '0', '0', '0', '0', '0', '0'],
    ['0', '0', '0', '0', '0', '0', '0', '0'],
  ]);
  //const prevBoard = [...board];
  //2ならホワイト、3ならブラック　完了
  //タスク
  //ターン制（true, false)
  const handleClick = (i: number, j: number) => {
    //黒
    //CheckHorizontal();

    //0の時置けるように
    if (!turn && board[i][j] == '1') {
      for (let inner = 0; inner < 8; inner++) {
        for (let outer = 0; outer < 8; outer++) {
          if (inner == i && outer == j) {
            const prevBoard = [...board]
            const prevBoard[inner][outer] = '2'
          }
        }
      }
      // setBoard((prevBoard) =>
      //   prevBoard.map((item: any, inner: number) =>
      //     item.map((items: any, outer: number) =>
      //       inner === i && outer === j ? '3' : items
      //     )
      //   )
      // );
      // setTurn(!turn);
      //setColor('white');
    } // else if ()
    //  else if (!turn && board[i][j] == '1') {
    //   //白
    //   setBoard((prevBoard) =>
    //     prevBoard.map((item: any, inner: number) =>
    //       item.map((items: any, outer: number) =>
    //         inner === i && outer === j ? '2' : items
    //       )
    //     )
    //   );
    //   setBoard((prevBoard) =>
    //     prevBoard.map((item: any, inner: number) =>
    //       item.map(
    //         (items: any, outer: number) => prevBoard[i][j] === '1' && '0'
    //       )
    //     )
    //   );
    //   setTurn(!turn);
    //   //setColor('black');
    // }
  };
  //盤面の評価、1は選択可能、2は白、3は黒
  //まぁとりあえず、
  //異なる色に挟まれたら反転する
  //2の間に3がある必要がある
  const CheckHorizontal = () => {
    //水平を探索し、2の間に3があるところを探す。
    //trueは3で黒、falseは2で白
    //trueの時、2の8つのブロックを探索する
    //falseの時、3の8つのブロックを探索する。

    //黒のターンの時、隣に白があって置ける場所を探索する。

    //黒のコマを置くときは、白のコマの周りから探索する方がいいのではないか。s

    //黒のコマを置く時
    if (turn) {
      setBoard((prevBoard) =>
        prevBoard.map((item: any, i: number) =>
          item.map((items: any, j: number) => {
            //もし、白の駒が見つかりなおかつ、近隣にのコマが0だったら。
            if (board[i][j] == '2') {
              if (board[i - 1][j - 1] == '0') {
                prevBoard[i - 1][j - 1] == '1';

              } else if (board[i - 1][j] == '0') {
                prevBoard[i - 1][j] == '1';

              } else if (board[i - 1][j + 1] == '0') {
                prevBoard[i - 1][j + 1] == '1';

              } else if (board[i][j - 1] == '0') {
                prevBoard[i][j - 1] == '1';

              } else if (board[i][j + 1] == '0') {
                prevBoard[i][j + 1] == '1';

              } else if (board[i + 1][j - 1] == '0') {
                prevBoard[i + 1][j - 1] == '1';

              } else if (board[i + 1][j] == '0') {
                prevBoard[i + 1][j] == '1';

              } else if (board[i + 1][j + 1] == '0') {
                prevBoard[i + 1][j + 1] == '1';
                
              }
            }
          })
        )
      );
      console.log(board);
    } else if (!turn) {
      setBoard((prevBoard) =>
        prevBoard.map((item: any, i: number) =>
          item.map((items: any, j: number) => {
            //もし、白の駒が見つかりなおかつ、近隣にのコマが0だったら。
            if (board[i][j] == '3') {
              if (board[i - 1][j - 1] == '0') {
                prevBoard[i - 1][j - 1] == '1';
              } else if (board[i - 1][j] == '0') {
                prevBoard[i - 1][j] == '1';
              } else if (board[i - 1][j + 1] == '0') {
                prevBoard[i - 1][j + 1] == '1';
              } else if (board[i][j - 1] == '0') {
                prevBoard[i][j - 1] == '1';
              } else if (board[i][j + 1] == '0') {
                prevBoard[i][j + 1] == '1';
              } else if (board[i + 1][j - 1] == '0') {
                prevBoard[i + 1][j - 1] == '1';
              } else if (board[i + 1][j] == '0') {
                prevBoard[i + 1][j] == '1';
              } else if (board[i + 1][j + 1] == '0') {
                prevBoard[i + 1][j + 1] == '1';
              }
            }
          })
        )
      );
    }
    console.log(board);
  };
  //3の間に２がある必要がある

  //最初はホリゾンタルが起動しない。
  //ユーザがクリックした瞬間にホリゾンタルが起動する。
  //起動し、盤面が１になったところに駒が置ける。
  //コマを置いたら、1の盤面をクリアする。

  return (
    <>
      <div className='mt-10' />
      <h1>現在は</h1>
      {turn ? <p>黒です。</p> : <p>白です。</p>}
      <div className='boardindex'>
        {/* おそらく親のidの中の子のidという形で識別をしてくれているのでは */}
        {board.map((item: any, i: number) => {
          return (
            <div className='boardstyle' key={i}>
              {item.map((items: any, j: number) => {
                return (
                  //2のボードだけ白、３のボードだけ黒
                  <button
                    onClick={() => handleClick(i, j)}
                    key={j}
                    className={(() => {
                      if (board[i][j] == '2') {
                        return 'whitestyles';
                      } else if (board[i][j] == '3') {
                        return 'blackstyles';
                      } else if (board[i][j] == '1') {
                        return 'boardstyles';
                      }
                    })()}
                  >
                    {board[i][j]}
                  </button>
                );
              })}
            </div>
          );
        })}
      </div>
    </>
  );
}

export default App;
